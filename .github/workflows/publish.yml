name: Docker Image Publish

on:
  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for changelog generation

      # Generate simple changelog based on git log
      - name: Generate Changelog
        id: changelog
        if: github.event_name != 'pull_request'
        run: |
          # If it's a tag, get changes since previous tag
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            # Get the current tag
            CURRENT_TAG=${GITHUB_REF#refs/tags/}
            
            # Find the previous tag
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 $CURRENT_TAG^ 2>/dev/null || echo "")
            
            if [ -z "$PREVIOUS_TAG" ]; then
              # If no previous tag, get all commits
              CHANGELOG=$(git log --pretty=format:"* %s (%h)" $CURRENT_TAG)
            else
              # Get commits between tags
              CHANGELOG=$(git log --pretty=format:"* %s (%h)" $PREVIOUS_TAG..$CURRENT_TAG)
            fi
          else
            # For non-tag pushes, get last 10 commits
            CHANGELOG=$(git log -10 --pretty=format:"* %s (%h)")
          fi
          
          # Escape newlines for GitHub Actions output
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
          
          echo "changelog=$CHANGELOG" >> $GITHUB_OUTPUT
          
      # Save changelog to file
      - name: Create Changelog File
        if: github.event_name != 'pull_request'
        run: |
          echo "# Changelog" > CHANGELOG.md
          echo "## Changes in this release" >> CHANGELOG.md
          echo "${{ steps.changelog.outputs.changelog }}" | sed 's/%0A/\n/g' >> CHANGELOG.md
          echo "Generated changelog"
          cat CHANGELOG.md

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.1.1
        with:
          cosign-release: 'v2.1.1'

      - name: Check install!
        if: github.event_name != 'pull_request'
        run: cosign version

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2.1.0

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v2.5.0
      
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # this is a simple way of using date and time to do versioning.
      - name: Generate version
        id: version
        run: |
          output=$(date -u '+%Y%m%d%H%M%S')
          echo "date_version=$output" >> $GITHUB_OUTPUT

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: docker_meta
        uses: docker/metadata-action@v4.4.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: type=sha,format=long
       
      - name: downcase REPO
        run: |
          echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and Push container images
        id: build-and-push
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }} # Don't push on PR
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm/v7,linux/arm64
          tags: |
            ${{ steps.docker_meta.outputs.tags }}
            ghcr.io/${{env.REPO}}:latest
            ghcr.io/${{env.REPO}}:${{steps.version.outputs.date_version}}
          build-args: |
            BUILD_VERSION=${{steps.version.outputs.date_version}}
            
      # Create a GitHub release with generated changelog
      - name: Create Release
        if: github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG.md
          files: |
            CHANGELOG.md
          token: ${{ secrets.GITHUB_TOKEN }}

      # Optionally, update VERSION file with new build info
      - name: Update VERSION with new build info
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
        run: |
          mkdir -p .github
          echo "Latest build: ${{steps.version.outputs.date_version}}" > .github/VERSION.md
          echo "Build timestamp: $(date -u)" >> .github/VERSION.md